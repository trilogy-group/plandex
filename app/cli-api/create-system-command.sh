#!/usr/bin/env bash

# Script to create system-wide plandex-api command

set -e

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Get current directory (where plandex CLI API is installed)
API_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Parse arguments
UNINSTALL=false
COMMAND_NAME="plandex-api"

while [[ $# -gt 0 ]]; do
    case $1 in
        --uninstall)
            UNINSTALL=true
            shift
            ;;
        --name)
            COMMAND_NAME="$2"
            shift 2
            ;;
        --help|-h)
            echo "Usage: $0 [options]"
            echo "Options:"
            echo "  --uninstall    Remove system command"
            echo "  --name NAME    Command name (default: plandex-api)"
            echo "  --help, -h     Show this help"
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            exit 1
            ;;
    esac
done

COMMAND_PATH="/usr/local/bin/$COMMAND_NAME"

if $UNINSTALL; then
    print_info "Removing system command: $COMMAND_NAME"
    
    if [ -f "$COMMAND_PATH" ]; then
        sudo rm -f "$COMMAND_PATH"
        print_success "System command removed: $COMMAND_PATH"
    else
        print_warning "System command not found: $COMMAND_PATH"
    fi
    exit 0
fi

print_info "Creating system-wide command: $COMMAND_NAME"
print_info "API directory: $API_DIR"

# Create the system command
sudo tee "$COMMAND_PATH" > /dev/null << EOF
#!/bin/bash
# Plandex CLI API system wrapper
# Auto-generated by create-system-command.sh

API_DIR="$API_DIR"

if [ ! -d "\$API_DIR" ]; then
    echo "❌ Plandex CLI API not found at \$API_DIR"
    echo "Original installation may have been moved or deleted."
    exit 1
fi

# Change to API directory and execute
cd "\$API_DIR"

# Handle different commands
case "\${1:-}" in
    setup)
        shift
        exec ./setup.sh "\$@"
        ;;
    install)
        shift
        exec ./install.sh "\$@"
        ;;
    deploy)
        shift
        exec ./deploy.sh "\$@"
        ;;
    requirements)
        shift
        exec ./install-requirements.sh "\$@"
        ;;
    uninstall)
        shift
        exec ./uninstall-local.sh "\$@"
        ;;
    status)
        exec ./deploy.sh status
        ;;
    start)
        exec ./deploy.sh autostart
        ;;
    stop)
        exec ./deploy.sh disable
        ;;
    local)
        exec ./deploy.sh local
        ;;
    *)
        echo "Plandex CLI API System Command"
        echo
        echo "Usage: $COMMAND_NAME <command> [options]"
        echo
        echo "Commands:"
        echo "  setup                - Complete setup (requirements + install)"
        echo "  install              - Build and configure CLI API"
        echo "  requirements         - Install system dependencies"
        echo "  deploy <mode>        - Deploy (local|autostart|disable|status)"
        echo "  start                - Start with auto-restart (autostart mode)"
        echo "  stop                 - Stop and disable auto-restart"
        echo "  local                - Run locally for testing"
        echo "  status               - Show deployment status"
        echo "  uninstall            - Remove local installation"
        echo
        echo "Examples:"
        echo "  $COMMAND_NAME setup --silent    # Silent complete setup"
        echo "  $COMMAND_NAME start             # Auto-start on boot"
        echo "  $COMMAND_NAME deploy local      # Test locally"
        echo "  $COMMAND_NAME status            # Check status"
        echo
        echo "Installation directory: \$API_DIR"
        ;;
esac
EOF

sudo chmod +x "$COMMAND_PATH"

print_success "System command created: $COMMAND_PATH"
print_info "You can now run: $COMMAND_NAME --help"

echo
print_info "Examples:"
echo "  $COMMAND_NAME setup --silent    # Complete silent setup"
echo "  $COMMAND_NAME start             # Start with auto-restart"
echo "  $COMMAND_NAME local             # Test locally"
echo "  $COMMAND_NAME status            # Check status"

# Test the command
if command -v "$COMMAND_NAME" &> /dev/null; then
    print_success "Command is available system-wide"
else
    print_warning "Command may not be in PATH. Try: hash -r"
fi 